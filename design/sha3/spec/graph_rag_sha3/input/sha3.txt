 
 
 
SHA3  Core 
Specification  
 
 
 
Author: Homer Hsing 
homer. hsing@gmail.com  
 
 
 
 
Rev. 0.1 
January 29, 2013  
  
 OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 ii  
 
 
 
 
 
 
 
 
 
 
 
 
 
This page has been intentionally left blank.   OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 iii  
Revision History  
Rev.  Date  Author  Description   
0.1 01/29/2013 Homer Hsing First Draft  
    
  OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 iv  
Contents  
INTRODUCTION ................................ ................................ ................................ .............  1 
ABOUT SHA -3................................ ................................ ................................ ................................ ............  1 
ABOUT THIS PROJECT  ................................ ................................ ................................ ................................ . 2 
ARCHITECTURE  ................................ ................................ ................................ ............  3 
ARCHITECTURE OF THE C ORE ................................ ................................ ................................ .....................  3 
ARCHITECTURE OF THE P ADDING MODULE  ................................ ................................ ................................ . 3 
ARCHITECTURE OF THE P ERMUTATION MODULE  ................................ ................................ .........................  4 
PORTS  ................................ ................................ ................................ ...............................  6 
USAGE  AND TIMING ................................ ................................ ................................ ..... 8 
SYNTHESIS RESULT  ................................ ................................ ................................ ... 10 
SYNTHESIS RESULT  ................................ ................................ ................................ ................................ ....10 
THROUGHPUT  ................................ ................................ ................................ ................................ ............ 11 
TESTBENCH  ................................ ................................ ................................ ..................  12 
REFERENCES  ................................ ................................ ................................ ................  13 
  OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 1 of 13 
1  
Introduction  
About  SHA -3 
SHA -3, originally known as Keccak  (pronounced          ) [1], is a cryptographic hash 
function selected as the winner of the NIST hash function competition  [2]. Because of the 
successful attacks on MD5, SHA -0 and theoretical attacks on SHA -1, NIST perceived a 
need for an alternative, dissimilar cryptographic hash, which became SHA -3 [3]. 
SHA -3 is a family of sponge functions that use a  permutation  as a building block [4]. The 
permutation  (over       ) is a sequence of operations on a state   that is a three -
dimensional array of elements of       , namely             [4]. The mapping between 
the bits of          and th e bits of a state   is that the           -th bit of   
is            for any                . The permutation consist s of 24 rounds , 
indexed with     from 0 to 23 . Each round   consists of five steps  [4]. 
              
                        ∑              
     ∑                
     
                                  ⁄  
                         (  
  ) 
( 
 ) ( 
 )            
                 
                         ( 
 ) (  
  )(  
  ) 
                             
             
                                
                [    ]                  
                                                   
The additions and multiplications are in       .  OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 2 of 13 
NIST requires the candidate algorithms to support at least four di ﬀerent output lengths 
                    with associated securit y levels  [6]. “SHA -3 512” , in which  
output length is 512-bit, has the highest security level among  all SHA -3 variant s. 
Denote the padding of a message   to a sequence of 576 -bit blocks  by 
            | |   
The padding is a multi -rate padding, appending a single bit 1 followed by the minimum 
number of bits 0 followed by a single bit 1 such that the length of the result is a  multiple 
of 576 [4]. Denote the number of blocks of   by | |   , and the  -   block of   by   . 
The algorithm of SHA -3 512 is as follows.  
 
         :    SHA -3-512                  
               | |  
          
           | |         
       (            ) 
        
       ⌊ ⌋    
About th is project  
This project has implemented “SHA -3 512” hash function . 
This project has implemented  two cores, one (high -throughput) core designed to work in 
high clock frequency  (150 MHz)  dedicated to ASIC or expensive FPGA  (Virtex 6) , 
another  (low-throughput)  core designed to work in  low clock frequency  (100 MHz) 
dedicated to cheap FPGA  (Spartan 3) . Because i n many systems the clock freque ncy is 
ﬁxed for the entire chip , so even if the hash core can reach a high frequency it has to be 
clocked at a lower frequency [5]. 
The code is FPGA -vendor independent, having been fully optimized, using  only one 
clock domain , not using  any latch.  
This project is licensed under the Apache License, version 2.   OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 3 of 13 
2  
Architectur e 
Architecture of the core  
The architecture depicted as follows is of the whole core.  Two cores implemented in this 
project have  the same architecture.  
 
Figure 1: The a rchitecture  of the whole core  
Architecture of the padding module  
The architecture of the padding module is illustrated in the figure  below . 
The width of the user input is far less than 576 bit. So the padding module uses a buffer 
to assembl e the user input.  
If the buffer grows  full, the padding module notices  the permutation module its output is 
valid . Then  the permutation  module begins calculation , the buffer cleared, the padding 
module waiting for input simultaneous ly. Padding 
module        Permutation 
module          OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 4 of 13 
 
Figure 2: The a rchitecture of the padding module  
Architecture of the permutation module  
The permutation module of the low throughput core is composed of a combinational logic 
block computing a round, a counter selecting the round constant, and a register storing  
the output.  
 
Figure 3A: The architecture of the permutation  modul e (low throughput core)  
 
In the high throughput core, two rounds are done per clock cycle.     
1600 -bit register  
                        
          counter  round const     
576-bit buffer  
                                     
     OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 5 of 13 
 
Figure 4B: The architecture of the permutation modul e (high throughput core)  
 
The round constant module is implemented by combinational logic , saving resource than 
block RAM,  because most bit s of the round constant is zero.     
1600 -bit register  
                        
           counter  round const   OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 6 of 13 
3  
Ports 
The ports  and their description are listed in the table below.  
Input ports  are sampled by the core at the rising edge of the clock.  
All o utput ports  are registered , not directly connected to any combinational logic  inside 
the core . 
For ports  wider than 1 bit, its bit index  is from the  port width minus one  down to zero.  
 
Table  1: Ports  of the high throughput core  
Port  name  Width  Direction  Description  
    1 In Clock 
      1 In Synchronous reset  
   64 In Input 
         3 In The byte length of     
         1 In Input is valid or not  
        1 In Current input is the last or not  
            1 Out Buffer is full or not  
    512 Out The hash result  
          1 Out The hash result  is ready or not  
 
   OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 7 of 13 
Table  2: Ports of the low throughput core  
Port  name  Width  Direction  Description  
    1 In Clock 
      1 In Synchronous reset  
   32 In Input 
         2 In The byte length of     
         1 In Input is valid or not  
        1 In Current input is the last or not  
            1 Out Buffer is full or not  
    512 Out The hash result  
          1 Out The hash result  is ready or not  
 
The width of port     and port          is difference  between the high throughput core 
and the low throughput core . The reason  is we want to get high performance . When the 
permutation module is computing  by the current input , the padding  module is preparing 
next input . We don ’t want the permutation wait the padding. For t he high throughput core, 
permutation is don e in 12 clock cycles, so its padding module should  prepare  next 576 bit 
in time , so its input width is 64 bit. For the low throughput core , which finishes 
permutation in 2 4 clock cycles , the input  width is fixed in the same way.   OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 8 of 13 
4  
Usage  and timing  
Before computing  a new hash value each time, reset the core. Suppose the core has 
computed SHA -3-512(“A”). Then you should first reset the core before letting it compute 
SHA -3-512(“B”). The reset method is to let       be 1, then after one clock cycle to let 
      be 0.  The rising edge of       should be aligned to the rising edge of     . 
If real width of the input is less than the width of input port ,    should be aligned to the 
most significant bit.  This may only happens at the last block  of input. Suppose the input 
is one byte data “A”.  You should let          =“A”, (          for the low throughput 
core) not        =“A”.  
If and only if current  input is the last block,          is 1. The value of          takes 
effect  only when          is 1. If the message length is multiple of the input port width, 
you should provide an additional zero-length block. For example, to hash “ABCDEFGH” , 
first s et 
                        
Then s et 
                     
You may provide input in any slow rate. If input is not ready, just l et          be 0, then 
the core will not  absorb  current input value . 
Only if             is 0 and          is 1, the core absorbs current value . If in any 
clock cycle                                then next valid value of     should 
be  . A timing graph below help s understand it. 
The hash result is ready only if           is 1. After           is 1, the hash result 
remain unchanged until next reset.   OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 9 of 13 
 
     
      
   
         
            XX     A    B    C     D    E    F     G    H     I     J     J      J     J     J     K    L     M   N    O  
Keep input 
unchanged   OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 10 of 13 
5  
Synthesis result  
Synthesis result  
The synthesis software  is Xilinx ISE version 14. 4. 
 
The high throughput core  has been synthesized targeting  an expensive Virtex 6  FPGA . 
Table  3: synthesis result of the high throughput core  
Device  Xilinx Virtex 6 XC6VLX240T -1FF1156  
Number of Slice Registers  2,220 
Number of Slice LUTs  9,895 
Number of fully used LUT -FF pairs  1,673  
Number of bonded  IOBs  585 
Number of BUFG/BUFGCTRLs  1 
Maximum Frequency  188.9  MHz  
 
The low throughput core  has been synthesized targeting a very cheap Spartan 3  FPGA . 
Table  4: synthesis result of the low throughput core  
Device  Xilinx Spartan 3 xc3s5000 -4fg900  
Number of Slices  2,321  
Number of Slice Flip Flops  2,346  
Number of 4 input LUTs  4,499  
Number of bonded IOBs  552 
Number of GCLKs  1 
Maximum Frequency  117.3  MHz  
  OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 11 of 13 
Throughput  
For t he high throughput core : 7.2 G bit /second  if clock frequency is 150 MHz  
For the low throughput core : 2.4 G bit /second  if clock frequency is 100 MHz   OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 12 of 13 
6  
Testbench  
The RTL  files and test benches for the high throughput core are  in directory 
“high_throughput_core ”. The files for the low throughput core are in directory 
“low_throughput_core ”. The structure of two directories is same.  
The file “testbench /simulation.do”  is a batch file for Model Sim to compile the HDL 
files, setup the wave file, and begin function simulation. In order to make it work 
properly, t he working directory of Model Sim m ust be the directory of “testbench ”. 
The file “testbench /test_ keccak.v” is the main test bench for the core s. The test  feeds 
input data to the core and compare s the correct result with the core output. For any wrong 
output,  the test bench  display s error message s. If all output being  correct, the test bench 
display s “OK”. 
  OpenCores  SHA3 Core  Specifications  1/29/2013  
 
 
www.opencores.org  Rev 0. 1 13 of 13 
7  
References  
[1] Guido Bertoni, Joan Daemen, Michaë l Peeters  and Gilles Van Assche , 
“The Keccak sponge function family: Specifications summary ”, 
http://keccak.noekeon.org/specs_summary.html   
[2] “NIST Selects Winner of Secure Hash Algorithm (SHA -3) Competition ”,  
NIST. Oct. 2012 . 
http://www.nist.gov/itl/csd/sha -100212.cfm   
[3] “SHA -3”, Wikipedia, the free encyclopedia,  
http://en.wikipedia.org/wiki/SHA3   
[4] The Keccak reference , version 3.0 ,  
http://keccak.noekeon.org/Keccak -reference -3.0.pdf   
[5] Keccak implementation overview, version 3.2,  
http://keccak.noekeon.org/Keccak -implementation -3.2.pdf   
[6] “Announcing request for candidate algorithm nominations for a new cryptographic 
hash algorithm (SHA -3) family”,  
Federal Register Notices 72 (2007), no. 212, 62212 –62220  
http://csrc.nist.gov/gr oups/ST/hash/index.html  
[7] K. Gaj, E. Homsirikamol, M. Rogaws ki, R. Shahid, and M. U. Sharif , 
“Comprehensive  evaluation of high -speed and medium -speed implementations of 
Five SHA -3 Finalists using  Xilinx and Altera FPGAs ”, 
3rd SHA -3 candidate conference, Mar 2012.  
 